<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!--    1.mybatis可以使用properties来引入外部properties配置文件的内容
            resource,引入类路径下的资源
            url：引入网络路径或者磁盘路径下的资源

        -->
    <properties resource="resource/deconfig.properties"></properties>
<!--    2.settings 包含 很多重要的设置项
        setting：用来设置每一个设置项
            name: 设置项名
            value：设置取项值

        -->
    <settings>
<!--        开启满足驼峰命名  -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
<!--    3.typeAliases 别名处理器，可以为我们的java类型起别名 -->
    <typeAliases>
<!--      typeAlias:为某个java类型起别名
                type：指定要起别名的类型的全类名；默认别名就是类小写；employee
                alias：指定新的别名
                别名不区分大小写
                -->
<!--        <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="Employee"></typeAlias>-->

<!--        批量起别名：package：为某个包下所有的类批量起别名
                     name；指定包名（为当前包及下面所有的后代包的每一个类型都起一个默认名（类名小写））
                    -->
<!--        使用@Alias 注解为某个类型指定新的别名  -->
        <package name="com.atguigu.mybatis.bean"/>
    </typeAliases>
<!-- 4.environments:环境们，mybatisi可以配置多种环境;default指定使用某种环境。可以达到快速切换当前环境
            environment:配置一个具体的环境信息；
                transactionManager和dataSource必须有；id代表当前环境的唯一标识
                transactionManager：事务管理器
                       type:两种方式    JDBC  和   MANAGED
                            自定义实现TransactionFactory接口，type是实现类的全类名
                dataSource：数据源
                        type数据源类型：三种： JNDI   POOLED  UNPOOLED
                        自定义数据源：实现DataSourceFactory接口，type自定义数据源的全类名
-->

    <environments default="development">
        <environment id="test">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--       5.databaseIdProvider 支持多数据库厂商
                    type="DB_VENDOR"    VendorDatabaseIdProvider
                        作用就是得到数据库厂商的标识（驱动自带的）,mybatis就能根据数据库厂商的标识来执行不同的sql
                        MySQL,Oracle,SQL Server,xxxx
-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
<!--    将我们写好的全局映射文件注册到全局配置文件中 -->
<!--    6.mappers: 将SQL映射注册到全局配置中 -->
    <mappers>
<!--        mapper: 注册一个SQL映射
                resource:引用类路径下的SQL映射文件
                url: 引用网络路径或磁盘路径下的SQL映射文件
                class: 引用（注册）接口
                    1.有SQL映射文件，映射文件名必须与接口同名，并且放在与接口同一目录下
                    2.没有SQL映射文件，所有的SQL都是利用注解写在接口上
                -->
        <mapper resource="resource/EmployeeMapper.xml"/>
        <mapper class="com/atguigu/mybatis/dao/EmployeeDaoAnnotation.java"/>
    </mappers>
</configuration>